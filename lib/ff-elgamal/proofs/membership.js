"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.generateNoProof = exports.generateYesProof = void 0;
var index_1 = require("../../index");
var index_2 = require("../index");
var web3 = require('web3');
var printConsole = false;
var add = function (a, b, sp) { return index_1.GlobalHelper.addBN(a, b, sp.q); };
var sub = function (a, b, sp) { return index_1.GlobalHelper.subBN(a, b, sp.q); };
var mul = function (a, b, sp) { return index_1.GlobalHelper.mulBN(a, b, sp.p); };
var div = function (a, b, sp) { return index_1.GlobalHelper.divBN(a, b, sp.p); };
var pow = function (a, b, sp) { return index_1.GlobalHelper.powBN(a, b, sp.p); };
var generateChallenge = function (q, uniqueID, a, b, a0, b0, a1, b1) {
    var c = web3.utils.soliditySha3(uniqueID, a, b, a0, b0, a1, b1);
    c = web3.utils.toBN(c);
    c = c.mod(q);
    return c;
};
exports.generateYesProof = function (cipher, sp, pk, uniqueID) {
    index_2.isCipher(cipher);
    index_2.isSystemParameters(sp);
    var a = cipher.a, b = cipher.b, r = cipher.r;
    var c0 = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var f0 = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var a0 = div(pow(sp.g, f0, sp), pow(a, c0, sp), sp);
    var b0 = div(pow(pk, f0, sp), pow(b, c0, sp), sp);
    var x = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var a1 = pow(sp.g, x, sp);
    var b1 = pow(pk, x, sp);
    var c = generateChallenge(sp.q, uniqueID, a, b, a0, b0, a1, b1);
    var c1 = add(sp.q, sub(c, c0, sp), sp);
    var f1 = add(x, c1.mul(r).mod(sp.q), sp);
    printConsole && console.log('c0\t\t\t', c0.toNumber());
    printConsole && console.log('f0\t\t\t', f0.toNumber());
    printConsole && console.log('a0\t\t\t', a0.toNumber());
    printConsole && console.log('b0\t\t\t', b0.toNumber());
    printConsole && console.log('x\t\t\t', x.toNumber());
    printConsole && console.log('a1\t\t\t', a1.toNumber());
    printConsole && console.log('b1\t\t\t', b1.toNumber());
    printConsole && console.log('c\t\t', c.toNumber());
    printConsole && console.log('c1 = (q + (c - c0) % q) % q\t', c1.toNumber());
    printConsole && console.log('f1 = x + c1*r\t\t', f1.toNumber());
    printConsole && console.log();
    return { a0: a0, a1: a1, b0: b0, b1: b1, c0: c0, c1: c1, f0: f0, f1: f1 };
};
exports.generateNoProof = function (cipher, sp, pk, uniqueID) {
    index_2.isCipher(cipher);
    index_2.isSystemParameters(sp);
    var a = cipher.a, b = cipher.b, r = cipher.r;
    var c1 = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var f1 = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var b_ = div(b, sp.g, sp);
    var a1 = div(pow(sp.g, f1, sp), pow(a, c1, sp), sp);
    var b1 = div(pow(pk, f1, sp), pow(b_, c1, sp), sp);
    var x = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var a0 = pow(sp.g, x, sp);
    var b0 = pow(pk, x, sp);
    var c = generateChallenge(sp.q, uniqueID, a, b, a0, b0, a1, b1);
    var c0 = add(sp.q, sub(c, c1, sp), sp);
    var f0 = add(x, c0.mul(r).mod(sp.q), sp);
    printConsole && console.log('c0\t\t\t', c0.toNumber());
    printConsole && console.log('f0\t\t\t', f0.toNumber());
    printConsole && console.log('a0\t\t\t', a0.toNumber());
    printConsole && console.log('b0\t\t\t', b0.toNumber());
    printConsole && console.log('x\t\t\t', x.toNumber());
    printConsole && console.log('a1\t\t\t', a1.toNumber());
    printConsole && console.log('b1\t\t\t', b1.toNumber());
    printConsole && console.log('c\t\t', c.toNumber());
    printConsole && console.log('c1 = (q + (c - c0) % q) % q\t', c1.toNumber());
    printConsole && console.log('f1 = x + c1*r\t\t', f1.toNumber());
    printConsole && console.log();
    return { a0: a0, a1: a1, b0: b0, b1: b1, c0: c0, c1: c1, f0: f0, f1: f1 };
};
exports.verify = function (cipher, proof, sp, pk, uniqueID) {
    index_2.isCipher(cipher);
    index_2.isSystemParameters(sp);
    var a = cipher.a, b = cipher.b;
    var a0 = proof.a0, a1 = proof.a1, b0 = proof.b0, b1 = proof.b1, c0 = proof.c0, c1 = proof.c1, f0 = proof.f0, f1 = proof.f1;
    var v1 = index_1.GlobalHelper.timingSafeEqualBN(pow(sp.g, f0, sp), mul(a0, pow(a, c0, sp), sp));
    var v2 = index_1.GlobalHelper.timingSafeEqualBN(pow(sp.g, f1, sp), mul(a1, pow(a, c1, sp), sp));
    var v3 = index_1.GlobalHelper.timingSafeEqualBN(pow(pk, f0, sp), mul(b0, pow(b, c0, sp), sp));
    var v4 = index_1.GlobalHelper.timingSafeEqualBN(pow(pk, f1, sp), mul(b1, pow(div(b, sp.g, sp), c1, sp), sp));
    var v5 = index_1.GlobalHelper.timingSafeEqualBN(c1.add(c0).mod(sp.q), generateChallenge(sp.q, uniqueID, a, b, a0, b0, a1, b1));
    printConsole && console.log('g^f0 == a0*a^c0:\t', v1);
    printConsole && console.log('g^f1 == a1*a^c1\t', v2);
    printConsole && console.log('h^f0 == b0*b^c0\t\t', v3);
    printConsole && console.log('h^f1 == b1*(b/g)^c1\t', v4);
    printConsole && console.log('c == c1 + c0\t\t', v5);
    printConsole && console.log();
    return v1 && v2 && v3 && v4 && v5;
};
