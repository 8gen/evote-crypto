"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.generate = void 0;
var index_1 = require("../../index");
var index_2 = require("../index");
var web3 = require('web3');
var printConsole = false;
var add = function (a, b, sp) { return index_1.GlobalHelper.addBN(a, b, sp.q); };
var mul = function (a, b, sp) { return index_1.GlobalHelper.mulBN(a, b, sp.p); };
var pow = function (a, b, sp) { return index_1.GlobalHelper.powBN(a, b, sp.p); };
var generateChallenge = function (q, uniqueID, a, b, a1, b1) {
    var c = web3.utils.soliditySha3(uniqueID, a, b, a1, b1);
    c = web3.utils.toBN(c);
    c = c.mod(q);
    return c;
};
exports.generate = function (cipher, sp, sk, uniqueID) {
    index_2.isCipher(cipher);
    index_2.isSystemParameters(sp);
    var a = cipher.a, b = cipher.b;
    var x = index_1.GlobalHelper.getSecureRandomValue(sp.q);
    var a1 = pow(a, x, sp);
    var b1 = pow(sp.g, x, sp);
    var c = generateChallenge(sp.q, uniqueID, a, b, a1, b1);
    var f = add(x, c.mul(sk).mod(sp.q), sp);
    var d = pow(a, sk, sp);
    printConsole && console.log('x\t\t\t', x.toNumber());
    printConsole && console.log('a1\t\t\t', a1.toNumber());
    printConsole && console.log('b1\t\t\t', b1.toNumber());
    printConsole && console.log('c\t\t\t', c.toNumber());
    printConsole && console.log('f = x + c*r\t\t', f.toNumber());
    printConsole && console.log();
    return { a1: a1, b1: b1, f: f, d: d };
};
exports.verify = function (cipher, proof, sp, pk, uniqueID) {
    index_2.isCipher(cipher);
    index_2.isSystemParameters(sp);
    var a = cipher.a, b = cipher.b;
    var a1 = proof.a1, b1 = proof.b1, f = proof.f, d = proof.d;
    var c = generateChallenge(sp.q, uniqueID, a, b, a1, b1);
    var l1 = pow(a, f, sp);
    var r1 = mul(a1, pow(d, c, sp), sp);
    var v1 = index_1.GlobalHelper.timingSafeEqualBN(l1, r1);
    var l2 = pow(sp.g, f, sp);
    var r2 = mul(b1, pow(pk, c, sp), sp);
    var v2 = index_1.GlobalHelper.timingSafeEqualBN(l2, r2);
    printConsole && console.log('a^f == a1*d^c:\t\t', v1, l1.toNumber(), r1.toNumber());
    printConsole && console.log('g^f == b1*h^c\t\t', v2, l2.toNumber(), r2.toNumber());
    printConsole && console.log();
    return v1 && v2;
};
